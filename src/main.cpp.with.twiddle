#include <uWS/uWS.h>
#include <iostream>
#include "json.hpp"
#include "PID.h"
#include <math.h>
#include <limits>

// for convenience
using json = nlohmann::json;

// For converting back and forth between radians and degrees.
constexpr double pi() { return M_PI; }
double deg2rad(double x) { return x * pi() / 180; }
double rad2deg(double x) { return x * 180 / pi(); }

// Checks if the SocketIO event has JSON data.
// If there is data the JSON object in string format will be returned,
// else the empty string "" will be returned.
std::string hasData(std::string s) {
  auto found_null = s.find("null");
  auto b1 = s.find_first_of("[");
  auto b2 = s.find_last_of("]");
  if (found_null != std::string::npos) {
    return "";
  }
  else if (b1 != std::string::npos && b2 != std::string::npos) {
    return s.substr(b1, b2 - b1 + 1);
  }
  return "";
}

int main()
{
  uWS::Hub h;

/**********************************/
 PID speed_control_pid = PID();
 PID steering_pid;
 int no_of_steps = 0; 
 int twiddle_count = 0;
 int twiddle_iter_max = 400;
 int p_change_counter = 0;
 int twiddle_start_step = 0;
 double best_error = std::numeric_limits<double>::max();
 int curr_index = 0;
 int curr_mode = 1;  //1 - correct; -1 for wrong

 double Kp = 0.129312; double Ki =0.0025747; double Kd =0.328219; // best
//double Kp = 0.0803058; double Ki =0.0015747; double Kd =0.33048; working
//double Kp = 0.0803058; double Ki =0.0015747; double Kd =0.328219; //best
// double Kp = 0.080306; double Ki =0.0015747; double Kd =0.328219; //best
//double Kp = 0.0803094; double Ki =0.0015747; double Kd =0.328219; //lowest =- best
//double Kp = 0.0803131; double Ki =0.0015747; double Kd =0.328219; //lowest =- best
//double Kp = 0.0674497; double Ki =0.000666; double Kd =0.16075;
//double Kp = 0.0674497; double Ki =0.000666; double Kd =0.16075;
//double Kp = 0.0677571; double Ki =0.000666; double Kd =0.16075;
// double Kp = 0.0803058; double Ki =0.0015747; double Kd =0.338769;  - qworks


 double pid_array[3] = {Kp,Ki,Kd};
 double pid_dp_array[3] = {Kp*0.001,Ki*0.00001,Kd*0.001};


 speed_control_pid.Init(.3, 0, 1.0);
 steering_pid.Init(Kp,Ki,Kd);
 double twiddle_error = 0.;
 bool twiddle_finished = false; 

 h.onMessage([&](uWS::WebSocket<uWS::SERVER> ws, char *data, size_t length, uWS::OpCode opCode) {
    // "42" at the start of the message means there's a websocket message event.
    // The 4 signifies a websocket message
    // The 2 signifies a websocket event
   

    if (length && length > 0.1 && data[0] == '4' && data[1] == '2')
    {
      auto s = hasData(std::string(data).substr(0, length));
      if (s != "") 
	{
		auto j = json::parse(s);
		std::string event = j[0].get<std::string>();


		if (event == "telemetry")
		 {
	             no_of_steps++;
		     if (twiddle_count < twiddle_iter_max) 
			
				{		 
				 	
							
					// j[1] is the data JSON object
					double cte = std::stod(j[1]["cte"].get<std::string>());
					double speed = std::stod(j[1]["speed"].get<std::string>());
					double speed_error, speed_value, steer_value;
					double target_speed = 30;				        
					steering_pid.UpdateError(cte + 1.);
					steer_value = steering_pid.TotalError();					
					speed_error =  speed - target_speed;
					speed_control_pid.UpdateError(speed_error);
					speed_value =  speed_control_pid.TotalError();
					json msgJson;
				   	msgJson["steering_angle"] = steer_value;
					
					if (fabs(cte) > 2.) { speed_value = 0.3/(cte*cte);}
					if (no_of_steps < 10) { speed_value = no_of_steps/10.; steer_value = 0; } 
				    	msgJson["throttle"] = speed_value;
				   	std::cout << " speed value "<< speed_value << std::endl;
					auto msg = "42[\"steer\"," + msgJson.dump() + "]";
				    	//std::cout << msg << std::endl;
				    	ws.send(msg.data(), msg.length(), uWS::OpCode::TEXT);
					std::cout << "cte: " << cte << "  no of steps   " << no_of_steps << std::endl;
					twiddle_count++;
					if (no_of_steps >= twiddle_start_step ) { twiddle_error += std::pow(cte,2);}
					if ((no_of_steps != 1) && fabs(cte) > 4. ) twiddle_count = twiddle_iter_max;
									
				}

			else   {

					//p_change_counter++;	
					//pid_array[curr_index] +=  pid_dp_array[curr_index];
					//if (p_change_counter % 10000 == 0) {
					//curr_index = (curr_index + 1) %3;	
					//}				
					std::cout << " entering tuning mode." << std::endl;
					twiddle_error = std::pow(twiddle_error,1./2.)/(no_of_steps-1);
					std::cout << " best error" << best_error << " twiddle error " << twiddle_error << std::endl;	
					if(twiddle_error < best_error)
					{
						 std::cout << " best error found" << std::endl;
 						 pid_dp_array[curr_index] *= 1.1;
						 pid_array[curr_index] +=  pid_dp_array[curr_index];
						 best_error =twiddle_error;
						 curr_index = (curr_index + 1) %3;
						 curr_mode = 1;
						
					 }
					 else
					 {
						 std::cout << " best error not found"  << std::endl;
						 pid_array[curr_index] -= 2 * pid_dp_array[curr_index];	
						 if (curr_mode  ==1 ) {curr_mode = -1; curr_index = (curr_index + 1) % 3;}
						 else {
							pid_dp_array[curr_index] *= 0.9;
							pid_array[curr_index] +=  pid_dp_array[curr_index];
							curr_index = (curr_index + 1) % 3;
							curr_mode = 1;
					  		}
					 }  
					
    				        std::cout << " curr index " << curr_index << std::endl;
					twiddle_count = 0;
					twiddle_finished = true;
				        no_of_steps = 0;
					twiddle_error = 0;
					steering_pid.Init(pid_array[0],pid_array[1],pid_array[2]);
					std::cout << "new pid values" << pid_array[0] << "," << pid_array[1] << "," << pid_array[2] << std::endl;
					std::string msg("42[\"reset\", {}]");
					ws.send(msg.data(), msg.length(), uWS::OpCode::TEXT);

				 }

		  }

        } 
	   else 
		{
		// Manual driving
		std::string msg = "42[\"manual\",{}]";
		ws.send(msg.data(), msg.length(), uWS::OpCode::TEXT);
		}
     }
  });

  // We don't need this since we're not using HTTP but if it's removed the program
  // doesn't compile :-(
  h.onHttpRequest([](uWS::HttpResponse *res, uWS::HttpRequest req, char *data, size_t, size_t) {
    const std::string s = "<h1>Hello world!</h1>";
    if (req.getUrl().valueLength == 1)
    {
      res->end(s.data(), s.length());
    }
    else
    {
      // i guess this should be done more gracefully?
      res->end(nullptr, 0);
    }
  });

  h.onConnection([&h](uWS::WebSocket<uWS::SERVER> ws, uWS::HttpRequest req) {
    std::cout << "Connected!!!" << std::endl;
  });

  h.onDisconnection([&h](uWS::WebSocket<uWS::SERVER> ws, int code, char *message, size_t length) {
    ws.close();
    std::cout << "Disconnected" << std::endl;
  });

  int port = 4567;
  if (h.listen(port))
  {
    std::cout << "Listening to port " << port << std::endl;
  }
  else
  {
    std::cerr << "Failed to listen to port" << std::endl;
    return -1;
  }
  h.run();
}
